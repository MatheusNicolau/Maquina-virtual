/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package maquinavirtual;

import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author 12080503
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    private static int posicaoTabela=0, posicaoTabelaAux,posicaoPilha=0;
    
    
    public Main() {
        initComponents();
        botaoExecutar.setEnabled(false);
        botaoParar.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        escolherArquivo = new javax.swing.JFileChooser();
        radioGroupModoExec = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        grade = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaPilha = new javax.swing.JTable();
        NormalRadio = new javax.swing.JRadioButton();
        PassoRadio = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        botaoExecutar = new javax.swing.JButton();
        botaoParar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu4 = new javax.swing.JMenu();
        openMenu = new javax.swing.JMenuItem();
        closeMenu = new javax.swing.JMenuItem();
        exitMenu = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        grade.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(grade);

        tabelaPilha.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Endereço", "Valor"
            }
        ));
        jScrollPane2.setViewportView(tabelaPilha);

        radioGroupModoExec.add(NormalRadio);
        NormalRadio.setText("Normal");
        NormalRadio.setActionCommand("normal");
        NormalRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NormalRadioActionPerformed(evt);
            }
        });

        radioGroupModoExec.add(PassoRadio);
        PassoRadio.setSelected(true);
        PassoRadio.setText("Passo a Passo");
        PassoRadio.setActionCommand("passoapasso");

        jLabel1.setText("Modo de Execução");

        jLabel2.setText("Memória (Pilha)");

        botaoExecutar.setText("Executar");
        botaoExecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoExecutarActionPerformed(evt);
            }
        });

        botaoParar.setText("Parar");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        jLabel3.setText("Saída de Dados");

        jMenu4.setText("File");

        openMenu.setText("Abrir");
        openMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuActionPerformed(evt);
            }
        });
        jMenu4.add(openMenu);

        closeMenu.setText("Fechar");
        jMenu4.add(closeMenu);

        exitMenu.setText("Sair");
        exitMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuActionPerformed(evt);
            }
        });
        jMenu4.add(exitMenu);

        jMenuBar2.add(jMenu4);

        jMenu5.setText("Edit");
        jMenuBar2.add(jMenu5);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 531, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(55, 55, 55)
                                .addComponent(jLabel3))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(232, 232, 232)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(NormalRadio)
                                    .addComponent(PassoRadio))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(botaoExecutar)
                                .addGap(26, 26, 26)
                                .addComponent(botaoParar, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(21, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(122, 122, 122))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NormalRadio)
                    .addComponent(botaoExecutar)
                    .addComponent(botaoParar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(PassoRadio)
                .addContainerGap(52, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuActionPerformed

        System.exit(0);
    }//GEN-LAST:event_exitMenuActionPerformed

    public int proximoCaractere(BufferedReader arquivo){
        try{
            return arquivo.read();
            
        }
        catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            return -1;
        }
        
    }
    
    private void openMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuActionPerformed
        // TODO add your handling code here:
        //Escolher frame = new Escolher();  
        //frame.setVisible(true); 
        
        
        
        String[] colunas = new String[]{"Linha","Instrução","Atributo 1","Atributo 2","Comentário"};
           
        int returnVal = escolherArquivo.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = escolherArquivo.getSelectedFile();

            try {
                FileReader arq = new FileReader(file);
                BufferedReader lerArq = new BufferedReader(arq);

                

                lerArq.mark(50000);

                LineNumberReader lnr = new LineNumberReader(lerArq);
                lnr.skip(Long.MAX_VALUE);
                int retorno = lnr.getLineNumber();
                int caractere=0;
                Character character;
                
                String linhas[][] = new String[retorno + 2][5];
                String count = "";
                String linha;
                
                lerArq.reset();
                int cont = 0;
                caractere=proximoCaractere(lerArq);
                
                while (caractere != -1) {
                    linha = "";
                    
                    while(Character.isLetterOrDigit(((char)caractere))){
                        linha+=(char)caractere;
                        caractere=proximoCaractere(lerArq);
                        //System.out.println((char)caractere);
                    }
                    
                    if(linha.equals("\n")){
                    caractere=proximoCaractere(lerArq);    
                    cont++;  
                    //System.out.println("contador"+cont);
                    }
                    if(linha.equals("NULL"))
                    {
                        linhas[cont][2] = linha;
                    }
                    else{
                        linhas[cont][1] = linha;
                         //System.out.println(linha);
                    }
                    
                    if(linha.equals("ALLOC") || linha.equals("DALLOC")) // verificacao pra ver se o comando é alloc ou dalloc pq esse comando precisa de 2 atributos
                    {  linha="";
                    
                         while((char)caractere==' ')
                             caractere=proximoCaractere(lerArq);
                         
                         if(Character.isDigit((char)caractere))
                             while(Character.isDigit((char)caractere)){
                             linha+=(char)caractere;
                             caractere=proximoCaractere(lerArq);
                             }
                         
                         linhas[cont][2] = linha; // coloco o valor no primeiro atributo
                         //System.out.println(linha);
                         linha="";
                         
                         while(!Character.isDigit((char)caractere)) // enquanto nao for numero ele percorre o arquivo
                             caractere=proximoCaractere(lerArq);
                         
                         
                             while(Character.isDigit((char)caractere)){
                             linha+=(char)caractere;
                             caractere=proximoCaractere(lerArq);
                             }
                         
                         linhas[cont][3] = linha; // coloco o valor no segundo atributo
                         //System.out.println(linha);
                         linha="";
                         
                         
                    }
                    
                    if(linha.equals("JMP")||linha.equals("JMPF")||linha.equals("CALL")||linha.equals("LDV")||linha.equals("LDC")||linha.equals("STR"))
                    {
                        linha="";
                        
                        while(!Character.isLetterOrDigit((char)caractere)) 
                        caractere=proximoCaractere(lerArq);
                       //System.out.println("I: "+(char)caractere); 
                        while(Character.isLetterOrDigit((char)caractere))
                        {
                     //  System.out.println("W: "+(char)caractere); 
                        
                            linha += (char)caractere;
                            caractere=proximoCaractere(lerArq);
                        }
                        
                        linhas[cont][2] = linha; // coloco o valor no segundo atributo
                        //System.out.println(linha);
                        //linha="";
                        
                    }
                    
                    count+= cont;
                    linhas[cont][0]=count;
                    
                       while(!Character.isLetterOrDigit((char)caractere)&& caractere!=-1){
                           if((char)caractere=='\n'){
                            cont++;    
                            }
                           caractere=proximoCaractere(lerArq);
                       }
                        
                    
                        if(caractere==-1)
                            break;
                        
                    count="";
                }

                DefaultTableModel modelo = new DefaultTableModel(linhas, colunas);

                grade.setModel(modelo);
                arq.close();

            } catch (IOException e) {
                System.err.printf("Erro na abertura do arquivo: %s.\n", e.getMessage());
            }

        } else {
            System.out.println("File access cancelled by user.");
        }
        
        botaoExecutar.setEnabled(true);
    }//GEN-LAST:event_openMenuActionPerformed

    private void NormalRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NormalRadioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NormalRadioActionPerformed

    
    private void botaoExecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoExecutarActionPerformed
      grade.addRowSelectionInterval(posicaoTabela,posicaoTabela);
        System.out.println(posicaoTabela + "valor:" + ((String)grade.getModel().getValueAt(grade.getSelectedRow(), 1)) );
        if(!((String)grade.getModel().getValueAt(grade.getSelectedRow(), 1)).equals("HLT")){
            
            if(((String)grade.getModel().getValueAt(grade.getSelectedRow(), 1)).equals("START")){
                
                //grade.getSelectionModel().clearSelection();
                grade.setRowSelectionInterval(posicaoTabela, posicaoTabela);
                posicaoTabela++;
            }
            
            if(((String)grade.getModel().getValueAt(grade.getSelectedRow(), 1)).equals("ALLOC")){
                posicaoPilha=Integer.parseInt((String)grade.getModel().getValueAt(posicaoTabela,2));
                for(int i=0;i<(int)grade.getModel().getValueAt(posicaoTabela,3);i++){
               
                DefaultTableModel pilha = (DefaultTableModel)tabelaPilha.getModel();
                Object[] valores = {"0"};
                pilha.addRow(valores);
                posicaoPilha++;
                }
                posicaoTabela++;
            }
          }
            
            
        
    }//GEN-LAST:event_botaoExecutarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    public void setModel() {

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton NormalRadio;
    private javax.swing.JRadioButton PassoRadio;
    private javax.swing.JButton botaoExecutar;
    private javax.swing.JButton botaoParar;
    private javax.swing.JMenuItem closeMenu;
    private javax.swing.JFileChooser escolherArquivo;
    private javax.swing.JMenuItem exitMenu;
    private javax.swing.JTable grade;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JMenuItem openMenu;
    private javax.swing.ButtonGroup radioGroupModoExec;
    private javax.swing.JTable tabelaPilha;
    // End of variables declaration//GEN-END:variables
}
